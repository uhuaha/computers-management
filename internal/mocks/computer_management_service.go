// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/computer_management.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "uhuaha/computers-management/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockComputerMgmtService is a mock of ComputerMgmtService interface.
type MockComputerMgmtService struct {
	ctrl     *gomock.Controller
	recorder *MockComputerMgmtServiceMockRecorder
}

// MockComputerMgmtServiceMockRecorder is the mock recorder for MockComputerMgmtService.
type MockComputerMgmtServiceMockRecorder struct {
	mock *MockComputerMgmtService
}

// NewMockComputerMgmtService creates a new mock instance.
func NewMockComputerMgmtService(ctrl *gomock.Controller) *MockComputerMgmtService {
	mock := &MockComputerMgmtService{ctrl: ctrl}
	mock.recorder = &MockComputerMgmtServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputerMgmtService) EXPECT() *MockComputerMgmtServiceMockRecorder {
	return m.recorder
}

// AddComputer mocks base method.
func (m *MockComputerMgmtService) AddComputer(computer model.Computer) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComputer", computer)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComputer indicates an expected call of AddComputer.
func (mr *MockComputerMgmtServiceMockRecorder) AddComputer(computer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComputer", reflect.TypeOf((*MockComputerMgmtService)(nil).AddComputer), computer)
}

// DeleteComputer mocks base method.
func (m *MockComputerMgmtService) DeleteComputer(computerID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComputer", computerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComputer indicates an expected call of DeleteComputer.
func (mr *MockComputerMgmtServiceMockRecorder) DeleteComputer(computerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComputer", reflect.TypeOf((*MockComputerMgmtService)(nil).DeleteComputer), computerID)
}

// GetAllComputers mocks base method.
func (m *MockComputerMgmtService) GetAllComputers() ([]model.Computer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllComputers")
	ret0, _ := ret[0].([]model.Computer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllComputers indicates an expected call of GetAllComputers.
func (mr *MockComputerMgmtServiceMockRecorder) GetAllComputers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllComputers", reflect.TypeOf((*MockComputerMgmtService)(nil).GetAllComputers))
}

// GetComputer mocks base method.
func (m *MockComputerMgmtService) GetComputer(computerID int) (model.Computer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputer", computerID)
	ret0, _ := ret[0].(model.Computer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComputer indicates an expected call of GetComputer.
func (mr *MockComputerMgmtServiceMockRecorder) GetComputer(computerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputer", reflect.TypeOf((*MockComputerMgmtService)(nil).GetComputer), computerID)
}

// GetComputersByEmployee mocks base method.
func (m *MockComputerMgmtService) GetComputersByEmployee(employee string) ([]model.Computer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputersByEmployee", employee)
	ret0, _ := ret[0].([]model.Computer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComputersByEmployee indicates an expected call of GetComputersByEmployee.
func (mr *MockComputerMgmtServiceMockRecorder) GetComputersByEmployee(employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputersByEmployee", reflect.TypeOf((*MockComputerMgmtService)(nil).GetComputersByEmployee), employee)
}

// UpdateComputer mocks base method.
func (m *MockComputerMgmtService) UpdateComputer(computerID int, data model.Computer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComputer", computerID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComputer indicates an expected call of UpdateComputer.
func (mr *MockComputerMgmtServiceMockRecorder) UpdateComputer(computerID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComputer", reflect.TypeOf((*MockComputerMgmtService)(nil).UpdateComputer), computerID, data)
}
